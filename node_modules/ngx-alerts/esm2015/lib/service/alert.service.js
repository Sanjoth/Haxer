/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { BehaviorSubject, Subject, timer } from 'rxjs';
import { ALERT_CONFIG } from '../alert.config';
import { scan, take } from 'rxjs/internal/operators';
export class AlertService {
    /**
     * @param {?} config
     */
    constructor(config) {
        this.config = config;
        this.dispatcher = new Subject();
        this.state = new BehaviorSubject([]);
        this.initConfig();
        this.dispatcher.pipe(scan(this.reducer, []))
            .subscribe((state) => this.state.next(state));
    }
    /**
     * @return {?}
     */
    initConfig() {
        if (!this.config) {
            this.config = {};
        }
        this.config.timeout = !!this.config.timeout ? this.config.timeout : 5000;
        this.config.maxMessages = !!this.config.maxMessages ? this.config.maxMessages : 5;
    }
    /**
     * @return {?}
     */
    get messages() {
        return this.state;
    }
    /**
     * @param {?} msg
     * @return {?}
     */
    info(msg) {
        this.addAlert({ content: msg, type: 'info' });
    }
    /**
     * @param {?} msg
     * @return {?}
     */
    danger(msg) {
        this.addAlert({ content: msg, type: 'danger' });
    }
    /**
     * @param {?} msg
     * @return {?}
     */
    success(msg) {
        this.addAlert({ content: msg, type: 'success' });
    }
    /**
     * @param {?} msg
     * @return {?}
     */
    warning(msg) {
        this.addAlert({ content: msg, type: 'warning' });
    }
    /**
     * @param {?} alert
     * @return {?}
     */
    close(alert) {
        this.dispatcher.next({ type: 'DELETE', alert: alert, config: this.config });
    }
    /**
     * @param {?} alert
     * @return {?}
     */
    addAlert(alert) {
        this.dispatcher.next({ type: 'ADD', alert: alert, config: this.config });
        timer(this.config.timeout)
            .pipe(take(1))
            .subscribe(() => {
            this.dispatcher.next({ type: 'DELETE', alert: alert, config: this.config });
        });
    }
    /**
     * @param {?} state
     * @param {?} action
     * @return {?}
     */
    reducer(state, action) {
        if (action.type === 'ADD') {
            const /** @type {?} */ output = [
                action.alert,
                ...state
            ];
            if (output.length > action.config.maxMessages) {
                output.pop();
            }
            return output;
        }
        else if (action.type === 'DELETE') {
            return state.filter(alert => alert !== action.alert);
        }
        return state;
    }
}
AlertService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
AlertService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [ALERT_CONFIG,] },] },
];
function AlertService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    AlertService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    AlertService.ctorParameters;
    /** @type {?} */
    AlertService.prototype.dispatcher;
    /** @type {?} */
    AlertService.prototype.state;
    /** @type {?} */
    AlertService.prototype.config;
}
//# sourceMappingURL=alert.service.js.map
