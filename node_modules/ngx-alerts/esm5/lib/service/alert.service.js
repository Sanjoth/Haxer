import * as tslib_1 from "tslib";
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { BehaviorSubject, Subject, timer } from 'rxjs';
import { ALERT_CONFIG } from '../alert.config';
import { scan, take } from 'rxjs/internal/operators';
var AlertService = /** @class */ (function () {
    /**
     * @param {?} config
     */
    function AlertService(config) {
        var _this = this;
        this.config = config;
        this.dispatcher = new Subject();
        this.state = new BehaviorSubject([]);
        this.initConfig();
        this.dispatcher.pipe(scan(this.reducer, []))
            .subscribe(function (state) { return _this.state.next(state); });
    }
    /**
     * @return {?}
     */
    AlertService.prototype.initConfig = function () {
        if (!this.config) {
            this.config = {};
        }
        this.config.timeout = !!this.config.timeout ? this.config.timeout : 5000;
        this.config.maxMessages = !!this.config.maxMessages ? this.config.maxMessages : 5;
    };
    Object.defineProperty(AlertService.prototype, "messages", {
        /**
         * @return {?}
         */
        get: function () {
            return this.state;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} msg
     * @return {?}
     */
    AlertService.prototype.info = function (msg) {
        this.addAlert({ content: msg, type: 'info' });
    };
    /**
     * @param {?} msg
     * @return {?}
     */
    AlertService.prototype.danger = function (msg) {
        this.addAlert({ content: msg, type: 'danger' });
    };
    /**
     * @param {?} msg
     * @return {?}
     */
    AlertService.prototype.success = function (msg) {
        this.addAlert({ content: msg, type: 'success' });
    };
    /**
     * @param {?} msg
     * @return {?}
     */
    AlertService.prototype.warning = function (msg) {
        this.addAlert({ content: msg, type: 'warning' });
    };
    /**
     * @param {?} alert
     * @return {?}
     */
    AlertService.prototype.close = function (alert) {
        this.dispatcher.next({ type: 'DELETE', alert: alert, config: this.config });
    };
    /**
     * @param {?} alert
     * @return {?}
     */
    AlertService.prototype.addAlert = function (alert) {
        var _this = this;
        this.dispatcher.next({ type: 'ADD', alert: alert, config: this.config });
        timer(this.config.timeout)
            .pipe(take(1))
            .subscribe(function () {
            _this.dispatcher.next({ type: 'DELETE', alert: alert, config: _this.config });
        });
    };
    /**
     * @param {?} state
     * @param {?} action
     * @return {?}
     */
    AlertService.prototype.reducer = function (state, action) {
        if (action.type === 'ADD') {
            var /** @type {?} */ output = tslib_1.__spread([
                action.alert
            ], state);
            if (output.length > action.config.maxMessages) {
                output.pop();
            }
            return output;
        }
        else if (action.type === 'DELETE') {
            return state.filter(function (alert) { return alert !== action.alert; });
        }
        return state;
    };
    return AlertService;
}());
export { AlertService };
AlertService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
AlertService.ctorParameters = function () { return [
    { type: undefined, decorators: [{ type: Inject, args: [ALERT_CONFIG,] },] },
]; };
function AlertService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    AlertService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    AlertService.ctorParameters;
    /** @type {?} */
    AlertService.prototype.dispatcher;
    /** @type {?} */
    AlertService.prototype.state;
    /** @type {?} */
    AlertService.prototype.config;
}
//# sourceMappingURL=alert.service.js.map
