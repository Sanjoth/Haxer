{"remainingRequest":"/Users/sanjothshaw/Git/Haxer/haxer-main/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/sanjothshaw/Git/Haxer/haxer-main/node_modules/rxjs/internal/operators/throwIfEmpty.js","dependencies":[{"path":"/Users/sanjothshaw/Git/Haxer/haxer-main/node_modules/rxjs/internal/operators/throwIfEmpty.js","mtime":499162500000},{"path":"/Users/sanjothshaw/Git/Haxer/haxer-main/node_modules/cache-loader/dist/cjs.js","mtime":1526283848964},{"path":"/Users/sanjothshaw/Git/Haxer/haxer-main/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1525974352000}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START  PURE_IMPORTS_END */\n\"use strict\";\n/*@__PURE__*/ Object.defineProperty(exports, \"__esModule\", { value: true });\nvar tap_1 = /*@__PURE__*/ require(\"./tap\");\nvar EmptyError_1 = /*@__PURE__*/ require(\"../util/EmptyError\");\n/**\n * If the source observable completes without emitting a value, it will emit\n * an error. The error will be created at that time by the optional\n * `errorFactory` argument, otherwise, the error will be {@link ErrorEmpty}.\n *\n * @example\n *\n * const click$ = fromEvent(button, 'click');\n *\n * clicks$.pipe(\n *   takeUntil(timer(1000)),\n *   throwIfEmpty(\n *     () => new Error('the button was not clicked within 1 second')\n *   ),\n * )\n * .subscribe({\n *   next() { console.log('The button was clicked'); },\n *   error(err) { console.error(err); },\n * });\n * @param {Function} [errorFactory] A factory function called to produce the\n * error to be thrown when the source observable completes without emitting a\n * value.\n */\nexports.throwIfEmpty = function (errorFactory) {\n    if (errorFactory === void 0) {\n        errorFactory = defaultErrorFactory;\n    }\n    return tap_1.tap({\n        hasValue: false,\n        next: function () { this.hasValue = true; },\n        complete: function () {\n            if (!this.hasValue) {\n                throw errorFactory();\n            }\n        }\n    });\n};\nfunction defaultErrorFactory() {\n    return new EmptyError_1.EmptyError();\n}\n",null]}