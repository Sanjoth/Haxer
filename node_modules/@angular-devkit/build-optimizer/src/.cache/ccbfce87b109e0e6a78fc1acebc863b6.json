{"remainingRequest":"/Users/sanjothshaw/Git/Haxer/haxer-main/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/sanjothshaw/Git/Haxer/haxer-main/node_modules/rxjs/internal/operators/share.js","dependencies":[{"path":"/Users/sanjothshaw/Git/Haxer/haxer-main/node_modules/rxjs/internal/operators/share.js","mtime":499162500000},{"path":"/Users/sanjothshaw/Git/Haxer/haxer-main/node_modules/cache-loader/dist/cjs.js","mtime":1526283848964},{"path":"/Users/sanjothshaw/Git/Haxer/haxer-main/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1525974352000}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START  PURE_IMPORTS_END */\n\"use strict\";\n/*@__PURE__*/ Object.defineProperty(exports, \"__esModule\", { value: true });\nvar multicast_1 = /*@__PURE__*/ require(\"./multicast\");\nvar refCount_1 = /*@__PURE__*/ require(\"./refCount\");\nvar Subject_1 = /*@__PURE__*/ require(\"../Subject\");\nfunction shareSubjectFactory() {\n    return new Subject_1.Subject();\n}\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .multicast(() => new Subject()).refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nfunction share() {\n    return function (source) { return refCount_1.refCount()(multicast_1.multicast(shareSubjectFactory)(source)); };\n}\nexports.share = share;\n",null]}