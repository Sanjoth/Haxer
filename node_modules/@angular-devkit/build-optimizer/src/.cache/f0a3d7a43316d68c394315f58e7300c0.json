{"remainingRequest":"/Users/sanjothshaw/Git/Haxer/haxer/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/sanjothshaw/Git/Haxer/haxer/node_modules/ngx-alerts/ngx-alerts.es5.js","dependencies":[{"path":"/Users/sanjothshaw/Git/Haxer/haxer/node_modules/ngx-alerts/ngx-alerts.es5.js","mtime":1517430541000},{"path":"/Users/sanjothshaw/Git/Haxer/haxer/node_modules/cache-loader/dist/cjs.js","mtime":1523740827915},{"path":"/Users/sanjothshaw/Git/Haxer/haxer/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { ChangeDetectionStrategy, Component, Inject, Injectable, InjectionToken, NgModule } from '@angular/core';\nimport { Subject as Subject$1 } from 'rxjs/Subject';\nimport { Observable as Observable$1 } from 'rxjs/Observable';\nimport 'rxjs/add/observable/interval';\nimport 'rxjs/add/operator/scan';\nimport 'rxjs/add/operator/take';\nimport { BehaviorSubject as BehaviorSubject$1 } from 'rxjs/BehaviorSubject';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nvar ALERT_CONFIG = new InjectionToken('config');\nvar AlertService = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} config\n     */\n    function AlertService(config) {\n        var _this = this;\n        this.config = config;\n        this.dispatcher = new Subject$1();\n        this.state = new BehaviorSubject$1([]);\n        this.initConfig();\n        this.dispatcher.scan(this.reducer, [])\n            .subscribe(function (state$$1) { return _this.state.next(state$$1); });\n    }\n    /**\n     * @return {?}\n     */\n    AlertService.prototype.initConfig = function () {\n        if (!this.config) {\n            this.config = {};\n        }\n        this.config.timeout = !!this.config.timeout ? this.config.timeout : 5000;\n        this.config.maxMessages = !!this.config.maxMessages ? this.config.maxMessages : 5;\n    };\n    Object.defineProperty(AlertService.prototype, \"messages\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this.state;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} msg\n     * @return {?}\n     */\n    AlertService.prototype.info = function (msg) {\n        this.addAlert({ content: msg, type: 'info' });\n    };\n    /**\n     * @param {?} msg\n     * @return {?}\n     */\n    AlertService.prototype.danger = function (msg) {\n        this.addAlert({ content: msg, type: 'danger' });\n    };\n    /**\n     * @param {?} msg\n     * @return {?}\n     */\n    AlertService.prototype.success = function (msg) {\n        this.addAlert({ content: msg, type: 'success' });\n    };\n    /**\n     * @param {?} msg\n     * @return {?}\n     */\n    AlertService.prototype.warning = function (msg) {\n        this.addAlert({ content: msg, type: 'warning' });\n    };\n    /**\n     * @param {?} alert\n     * @return {?}\n     */\n    AlertService.prototype.close = function (alert) {\n        this.dispatcher.next({ type: 'DELETE', alert: alert, config: this.config });\n    };\n    /**\n     * @param {?} alert\n     * @return {?}\n     */\n    AlertService.prototype.addAlert = function (alert) {\n        var _this = this;\n        this.dispatcher.next({ type: 'ADD', alert: alert, config: this.config });\n        Observable$1.interval(this.config.timeout).take(1).subscribe(function () {\n            _this.dispatcher.next({ type: 'DELETE', alert: alert, config: _this.config });\n        });\n    };\n    /**\n     * @param {?} state\n     * @param {?} action\n     * @return {?}\n     */\n    AlertService.prototype.reducer = function (state$$1, action) {\n        if (action.type === 'ADD') {\n            var /** @type {?} */ output = [\n                action.alert\n            ].concat(state$$1);\n            if (output.length > action.config.maxMessages) {\n                output.pop();\n            }\n            return output;\n        }\n        else if (action.type === 'DELETE') {\n            return state$$1.filter(function (alert) { return alert !== action.alert; });\n        }\n        return state$$1;\n    };\n    return AlertService;\n}());\nvar AlertComponent = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} alertService\n     */\n    function AlertComponent(alertService) {\n        this.alertService = alertService;\n    }\n    /**\n     * @return {?}\n     */\n    AlertComponent.prototype.ngOnInit = function () {\n        this.alerts = this.alertService.messages;\n    };\n    /**\n     * @param {?} alert\n     * @return {?}\n     */\n    AlertComponent.prototype.close = function (alert) {\n        this.alertService.close(alert);\n    };\n    return AlertComponent;\n}());\nvar AlertModule = /*@__PURE__*/ (function () {\n    function AlertModule() {\n    }\n    /**\n     * @param {?=} config\n     * @return {?}\n     */\n    AlertModule.forRoot = function (config) {\n        return {\n            ngModule: AlertModule,\n            providers: [\n                AlertService,\n                { provide: ALERT_CONFIG, useValue: config }\n            ]\n        };\n    };\n    return AlertModule;\n}());\n/**\n * Generated bundle index. Do not edit.\n */\nexport { AlertService, AlertModule, ALERT_CONFIG as ɵa, AlertComponent as ɵb };\n//# sourceMappingURL=ngx-alerts.es5.js.map\n",null]}